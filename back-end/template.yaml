AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:

  JwtSecret:
    Type: String

  # Pusher Credentials
  AppId:
    Type: String
  AppKey:
    Type: String
  SecretKey:
    Type: String

Globals:
  Function:
    Runtime: nodejs8.10
    Handler: shared/kappa.handler
    Tags:
      Application: Startup-Clix
    Environment:
      Variables:
        TABLE_NAME: !Ref GameTable
        JWT_SECRET: !Ref JwtSecret

        # Pusher Credentials
        APP_ID: !Ref AppId
        APP_KEY: !Ref AppKey
        SECRET_KEY: !Ref SecretKey

Resources:

  ##############################
  ### API-Gateway Functions ####
  ##############################

  GetGameChannelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/getGameChannel
      Role: !GetAtt [ ExecutionRole, Arn ]
      Environment:
        Variables:
          GAME_STATE_MACHINE_ARN: !Ref GameStateMachine
      Events:
        GetChannelEvent:
          Type: Api
          Properties:
            Path: /getgamechannel
            Method: get

  JoinPrivateGameChannelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/joinPrivateGameChannel
      Role: !GetAtt [ ExecutionRole, Arn ]
      Environment:
        Variables:
          GAME_STATE_MACHINE_ARN: !Ref GameStateMachine
      Events:
        GetChannelEvent:
          Type: Api
          Properties:
            Path: /joinprivategamechannel
            Method: get

  SellProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/sellProduct
      Role: !GetAtt [ ExecutionRole, Arn ]
      Events:
        GetChannelEvent:
          Type: Api
          Properties:
            Path: /sellproduct
            Method: get

  PusherWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/pusherWebhook
      Role: !GetAtt [ ExecutionRole, Arn ]
      Environment:
        Variables:
          GAME_STATE_MACHINE_ARN: !Ref GameStateMachine
      Events:
        pusherAuthEvent:
          Type: Api
          Properties:
            Path: /pusherpresence
            Method: post

  ##############################
  ### State-Machine Functions ##
  ##############################

  GameStartFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/gameStart
      Role: !GetAtt [ ExecutionRole, Arn ]

  RoundStartFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/roundStart
      Role: !GetAtt [ ExecutionRole, Arn ]

  RoundEndFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/roundEnd
      Role: !GetAtt [ ExecutionRole, Arn ]

  GameEndFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/gameEnd
      Role: !GetAtt [ ExecutionRole, Arn ]

  ##############################
  ########### Table ############
  ##############################

  GameTable: 
    Type: AWS::Serverless::SimpleTable

  ##############################
  ####### State Machine ########
  ##############################

  GameStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt [ ExecutionRole, Arn ]
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "StartAt": "GameStart",
              "States": {
                "GameStart": {
                  "Type": "Task",
                  "Resource": "${GameStartFunctionArn}",
                  "TimeoutSeconds": 5,
                  "Next": "WaitForNextRound"
                },
                "WaitForNextRound": {
                  "Type": "Wait",
                  "Seconds": 3,
                  "Next": "RoundStart"
                },
                "RoundStart": {
                  "Type": "Task",
                  "Resource": "${RoundStartFunctionArn}",
                  "TimeoutSeconds": 5,
                  "Next": "Round"
                },
                "Round": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "RoundEnd"
                },
                "RoundEnd": {
                  "Type": "Task",
                  "Resource": "${RoundEndFunctionArn}",
                  "TimeoutSeconds": 5,
                  "Next": "CheckRemainingPlayers"
                },
                "CheckRemainingPlayers": {
                  "Type": "Choice",
                  "Default": "WaitForNextRound",
                  "Choices": [
                    {
                      "Variable": "$.activePlayerCount",
                      "NumericEquals": 1,
                      "Next": "GameEnd"
                    }
                  ]
                },
                "GameEnd": {
                  "Type": "Task",
                  "Resource": "${GameEndFunctionArn}",
                  "End": true
                }
              }
            }
          -
            GameStartFunctionArn: !GetAtt [ GameStartFunction, Arn ]
            RoundStartFunctionArn: !GetAtt [ RoundStartFunction, Arn ]
            RoundEndFunctionArn: !GetAtt [ RoundEndFunction, Arn ]
            GameEndFunctionArn: !GetAtt [ GameEndFunction, Arn ]

  ##############################
  ########### Role #############
  ##############################

  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Path: /